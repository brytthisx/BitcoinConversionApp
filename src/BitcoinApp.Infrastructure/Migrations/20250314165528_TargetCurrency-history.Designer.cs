// <auto-generated />
using System;
using BitcoinApp.Infrastructure.Persistence.Database.MsSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BitcoinApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250314165528_TargetCurrency-history")]
    partial class TargetCurrencyhistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BitcoinApp.Domain.CryptoHistory.CryptoHistoryRecord", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HistoryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryId");

                    b.ToTable("CryptoHistoryRecords");
                });

            modelBuilder.Entity("BitcoinApp.Domain.ExchangeMarket.Conversion", b =>
                {
                    b.Property<Guid>("ConversionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConversionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversionId");

                    b.ToTable("Conversions");
                });

            modelBuilder.Entity("BitcoinApp.Infrastructure.Persistence.DomainEvent", b =>
                {
                    b.Property<Guid>("DomainEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OccuredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DomainEventId");

                    b.ToTable("DomainEvent");
                });

            modelBuilder.Entity("BitcoinApp.Domain.CryptoHistory.CryptoHistoryRecord", b =>
                {
                    b.OwnsOne("BitcoinApp.Domain.CryptoHistory.Money", "ConvertedPrice", b1 =>
                        {
                            b1.Property<Guid>("CryptoHistoryRecordHistoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("CryptoHistoryRecordHistoryId");

                            b1.ToTable("CryptoHistoryRecords");

                            b1.WithOwner()
                                .HasForeignKey("CryptoHistoryRecordHistoryId");
                        });

                    b.OwnsOne("BitcoinApp.Domain.CryptoHistory.Money", "OriginalPrice", b1 =>
                        {
                            b1.Property<Guid>("CryptoHistoryRecordHistoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("CryptoHistoryRecordHistoryId");

                            b1.ToTable("CryptoHistoryRecords");

                            b1.WithOwner()
                                .HasForeignKey("CryptoHistoryRecordHistoryId");
                        });

                    b.Navigation("ConvertedPrice")
                        .IsRequired();

                    b.Navigation("OriginalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("BitcoinApp.Domain.ExchangeMarket.Conversion", b =>
                {
                    b.OwnsOne("BitcoinApp.Domain.ExchangeMarket.Money", "ActualConversion", b1 =>
                        {
                            b1.Property<Guid>("ConversionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("ConversionId");

                            b1.ToTable("Conversions");

                            b1.WithOwner()
                                .HasForeignKey("ConversionId");
                        });

                    b.Navigation("ActualConversion")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
